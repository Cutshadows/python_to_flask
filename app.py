from flask import Flaskapp = Flask(__name__)# class in pythonclass Book():	def __init__(self, title, author, pages):		self.title = title		self.author = author		self.pages = pages	def __repr__(self):		return f'Title: {self.title}, Author: {self.author}'	def __len__(self):		return self.pagesclass Circle():	pi: float = 3.14	def __init__(self, radius=1):		self.radius = radius	def area(self):		return self.radius * self.radius * self.pi	def circunference(self):		return 2 * self.pi * self.radiusclass Animal():	def __init__(self, fur=None):		self.fur = fur	def report(self):		print('Animal')	def eat(self):		print('Eating!')class Dog(Animal):	def __init__(self, fur):		Animal.__init__(self, fur)		print('DogCreated!')	def report(self):		print('I am a dog!')def code_maker(mystring):	output = list(mystring)	print(output)	for index, letter in enumerate(mystring):		for vowel in 'aeiou':			if letter.lower() == vowel:				output[index] = 'x'	output = ''.join(output)	return outputdef even_check(num):	if num % 2 == 0:		print("Number was even")	else:		print("Odd number")@app.route('/')def hello_world():  # put application's code here	my_dogs: int = 2	# my_dogs = ['Sammy', 'Frankie']	username = 'Sammy'	color = 'blue'	text_test: str = 'abcdefghij'	print("jump de dos en dos", text_test[0:7:2])	print("jump de dos en dos", text_test[::2])	print("reverse", text_test[::-1])	print("all ok", text_test[::])	print("The {} favorite is {}".format(username, color))	# Python 3.6 above	print(f"The {username} favorite is {color}")	print(2 + 10 * 10 + 3 / 2, my_dogs)	# Lists	mylist: list = ['a', 'b', 'c', 'd', 'e', 'h', 'g', 'j']	mylist1: list = ['a', 'm', 'n', '単']	mylist2: list = ['o', 'p', 'q', 'r']	mylist.append('z')	mylist.insert(0, 'x')	print(mylist)	print(len(mylist))	print(mylist[1:len(mylist)])	popped_item = mylist.pop(0)	print(mylist)	print(popped_item)	mega_list: list = [mylist, mylist1, mylist2]	print(mega_list)	print(mega_list[1][0])	dic: dict = {'key1': 'val1', 'key2': 'val2'}	print(dic)	print(dic['key1'])	print(dic.keys())	print(dic.values())	print(dic.items())	salaries: dict = {'Jhon': 20, 'Sally': 30, 'Sammy': 15}	salaries['Cindy'] = 100	print(salaries)	print(salaries['Sally'])	# Type 2 dictionaries	salaries: dict = {'Jhon': [1, 3, 5], 'Sally': [40, 40, 60]}	print(salaries['Sally'][2])	# Type 3 dictionaries	salaries: dict = {'Jhon': {'salary': 20, 'age': 20}}	print(salaries['Jhon']['salary'])	# Booleans	boolne: bool = False	booln: bool = True	boolnone: bool = None	print(boolne)	print(booln)	print(boolnone)	# Tuples	tuples: tuple = (1, 2, 4)	print(tuples[2])	# Sets	setter: set = set()	print(setter)	setter.add(1)	setter.add(2)	setter.add(3)	setter.add(1)	print(setter)	if booln:		print(f'Es {booln}')	elif not booln:		print(f'No es  {booln}')	else:		print(f'No es  {booln}')	my_iterables: list = [1, 2, 3, 4]	# Cuenta los values de la lista	for item_name in my_iterables:		print(f'item {item_name}')	salaries = {'Jhon': 1, 'Sally': 20, 'Lisa': 30}	for employee in salaries:		print(employee, '\n has salary of: ', salaries[employee])		print(f' Even checks {even_check(salaries[employee])}')	mypairs: list = [('a', 1), ('b', 2), ('c', 3)]	# for item in mypairs:	#	print(item)	for (item1, item2) in mypairs:		print(item1, item2)	result: list = list(range(0, 11, 2))	print('z' in 'asdfla単kqw単le単asdcxzx')	print(1 in [1, 2, 3, 4])	index: int = 0	for index, letter in enumerate(mylist):		print(f'{index} at letter as : {letter}')	# print('is at index: {}'.format(index))	# index = index+1	# print(' ')	print('-x-'.join(mylist))	print(code_maker('Andres'))	circle = Circle(10)	print(circle.radius)	print(circle.area())	print(circle.circunference())	a = Animal()	a.eat()	a.report()	dog = Dog('Frizzy')	print(dog.fur)	my_book = Book('Python Rocks!', 'Jose', 234)	print(my_book)	length_book = len(my_book)	print(length_book)	return 'Hello World!'if __name__ == '__main__':	app.run()